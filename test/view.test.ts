import {View} from '../src/View';
import {Scene, Vec3, Xfo} from '@zeainc/zea-engine'
import {Pose} from '../src/Pose'
import {SelectionSet} from '../src/SelectionSet'

describe('View', () => {
  it('Should create a simple valid view and have the right JSON', () => {
    // GIVEN
    const scene = new Scene()
    let view = new View('View 1', scene)
    expect(view.name).toEqual('View 1');
    expect(view.pose).not.toBeNull();

    const expectedViewJson = require('./data/simpleView.json')

    // WHEN
    const viewJson = view.saveJson()
    viewJson.id = '' // hack : ignore the autogenerated ID

    // THEN
    expect(viewJson).toEqual(expectedViewJson);
  });

  it('Should load a View from JSON', () => {
    // GIVEN
    let viewJson = require('./data/simpleView.json')
    const scene = new Scene()
    let view = new View('ViewFakeName', scene)

    // WHEN
    view.loadJson(viewJson)

    // THEN
    expect(view.name).toEqual('View 1');
    expect(view.cameraXfo).toEqual(new Xfo());
    expect(view.cameraTarget).toEqual(new Vec3());
    expect(view.selectionSets).toBeUndefined();
    expect(view.pose).toEqual(new Pose(scene));
  });

  it('Should create a view and set selectionSets', () => {
    // GIVEN
    const scene = new Scene()
    let view = new View('ViewFakeName', scene)

    // WHEN
    let selectionSet = new SelectionSet('FakeSelectionSet', [], scene)
    view.attachSelectionSet(selectionSet)

    // THEN
    expect(view.selectionSets).toContain(selectionSet);
    expect(view.hasActiveSelectionSetWithName(selectionSet.name)).toBeTruthy();

    // AND
    view.detachSelectionSet(selectionSet)

    // THEN
    expect(view.hasActiveSelectionSetWithName(selectionSet.name)).toBeFalsy();
    expect(view.selectionSets).toBeUndefined()
  });

  it('Should copy a view and its selectionSets', () => {
    // GIVEN
    const scene = new Scene()
    let selectionSet = new SelectionSet('FakeSelectionSet', [], scene)
    let baseView = new View('ViewFakeName', scene)
    baseView.attachSelectionSet(selectionSet)


    // WHEN
    let duplicatedView = new View('ViewFakeName2', scene)
    duplicatedView.copyFrom(baseView)


    // THEN
    expect(duplicatedView.cameraTarget).toEqual(baseView.cameraTarget);
    expect(duplicatedView.cameraXfo).toEqual(baseView.cameraXfo);
    expect(duplicatedView.selectionSets).toEqual(baseView.selectionSets);
    expect(duplicatedView.pose).toEqual(baseView.pose);
  });
});
